diff --git a/src/api/transport/stun.cc b/src/api/transport/stun.cc
index 7ef6852..d3e475f 100644
--- a/src/api/transport/stun.cc
+++ b/src/api/transport/stun.cc
@@ -590,26 +590,31 @@ bool StunMessage::Read(ByteBufferReader* buf) {
   buffer_.assign(buf->Data(), buf->Length());
 
   if (!buf->ReadUInt16(&type_)) {
+        RTC_LOG(LS_ERROR) << "EARLY 1";
     return false;
   }
 
   if (type_ & 0x8000) {
     // RTP and RTCP set the MSB of first byte, since first two bits are version,
     // and version is always 2 (10). If set, this is not a STUN packet.
+        RTC_LOG(LS_ERROR) << "EARLY 2";
     return false;
   }
 
   if (!buf->ReadUInt16(&length_)) {
+        RTC_LOG(LS_ERROR) << "EARLY 3";
     return false;
   }
 
   std::string magic_cookie;
   if (!buf->ReadString(&magic_cookie, kStunMagicCookieLength)) {
+    RTC_LOG(LS_ERROR) << "EARLY 4";
     return false;
   }
 
   std::string transaction_id;
   if (!buf->ReadString(&transaction_id, kStunTransactionIdLength)) {
+        RTC_LOG(LS_ERROR) << "EARLY 5";
     return false;
   }
 
@@ -618,6 +623,7 @@ bool StunMessage::Read(ByteBufferReader* buf) {
                 "Integer size mismatch: magic_cookie_int and kStunMagicCookie");
   std::memcpy(&magic_cookie_int, magic_cookie.data(), sizeof(magic_cookie_int));
   if (rtc::NetworkToHost32(magic_cookie_int) != kStunMagicCookie) {
+        RTC_LOG(LS_ERROR) << "EARLY 6 " << kStunMagicCookie << " " << rtc::NetworkToHost32(magic_cookie_int);
     // If magic cookie is invalid it means that the peer implements
     // RFC3489 instead of RFC5389.
     transaction_id.insert(0, magic_cookie);
@@ -627,6 +633,7 @@ bool StunMessage::Read(ByteBufferReader* buf) {
   reduced_transaction_id_ = ReduceTransactionId(transaction_id_);
 
   if (length_ != buf->Length()) {
+        RTC_LOG(LS_ERROR) << "EARLY 7" << length_ << " - " << buf->Length();
     return false;
   }
 
@@ -636,9 +643,16 @@ bool StunMessage::Read(ByteBufferReader* buf) {
   while (buf->Length() > rest) {
     uint16_t attr_type, attr_length;
     if (!buf->ReadUInt16(&attr_type))
+    {
+        RTC_LOG(LS_ERROR) << "EARLY 8";
+
       return false;
-    if (!buf->ReadUInt16(&attr_length))
+    }
+    if (!buf->ReadUInt16(&attr_length)) {
+        RTC_LOG(LS_ERROR) << "EARLY 9";
+
       return false;
+    }
 
     std::unique_ptr<StunAttribute> attr(
         CreateAttribute(attr_type, attr_length));
@@ -648,10 +662,12 @@ bool StunMessage::Read(ByteBufferReader* buf) {
         attr_length += (4 - (attr_length % 4));
       }
       if (!buf->Consume(attr_length)) {
+        RTC_LOG(LS_ERROR) << "EARLY 10";
         return false;
       }
     } else {
       if (!attr->Read(buf)) {
+        RTC_LOG(LS_ERROR) << "EARLY 11";
         return false;
       }
       attrs_.push_back(std::move(attr));
@@ -949,10 +965,15 @@ bool StunAddressAttribute::Write(ByteBufferWriter* buf) const {
   switch (address_.family()) {
     case AF_INET: {
       in_addr v4addr = address_.ipaddr().ipv4_address();
+    RTC_LOG(LS_ERROR) << "HMDTF 1";
+
       buf->WriteBytes(reinterpret_cast<char*>(&v4addr), sizeof(v4addr));
       break;
     }
     case AF_INET6: {
+              RTC_LOG(LS_ERROR) << "HMDTF 2";
+
+
       in6_addr v6addr = address_.ipaddr().ipv6_address();
       buf->WriteBytes(reinterpret_cast<char*>(&v6addr), sizeof(v6addr));
       break;
@@ -1039,10 +1060,14 @@ bool StunXorAddressAttribute::Write(ByteBufferWriter* buf) const {
   switch (xored_ip.family()) {
     case AF_INET: {
       in_addr v4addr = xored_ip.ipv4_address();
+    RTC_LOG(LS_ERROR) << "DUM DUM";
+
       buf->WriteBytes(reinterpret_cast<const char*>(&v4addr), sizeof(v4addr));
       break;
     }
     case AF_INET6: {
+    RTC_LOG(LS_ERROR) << "DUM DUM2";
+
       in6_addr v6addr = xored_ip.ipv6_address();
       buf->WriteBytes(reinterpret_cast<const char*>(&v6addr), sizeof(v6addr));
       break;
diff --git a/src/p2p/base/port.cc b/src/p2p/base/port.cc
index 3069799..15a9ed2 100644
--- a/src/p2p/base/port.cc
+++ b/src/p2p/base/port.cc
@@ -448,6 +448,7 @@ bool Port::GetStunMessage(const char* data,
                  GOOG_PING_ERROR_RESPONSE};
   if (!StunMessage::IsStunMethod(types, data, size) &&
       !StunMessage::ValidateFingerprint(data, size)) {
+              RTC_LOG(LS_ERROR) << "PRE1 " << !StunMessage::IsStunMethod(types, data, size) << " " << !StunMessage::ValidateFingerprint(data, size);
     return false;
   }
 
@@ -457,6 +458,8 @@ bool Port::GetStunMessage(const char* data,
   rtc::ByteBufferReader buf(
       rtc::MakeArrayView(reinterpret_cast<const uint8_t*>(data), size));
   if (!stun_msg->Read(&buf) || (buf.Length() > 0)) {
+              RTC_LOG(LS_ERROR) << "PRE2 " << !stun_msg->Read(&buf) << " " << (buf.Length() > 0);
+
     return false;
   }
 
